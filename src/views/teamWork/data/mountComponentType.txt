
type C3dViewerHandlerType = {
    [key: string] : any
};
class C3dViewerHandler {

    protected _C3dViewer: C3dViewerHandlerType = {};
    
    // 切换2D3D
    _switch2D3DStatus:string = '2d';
    
    // 执行播放 id
    _playId:number = 0;
    
    constructor(C3dViewer: Object) {
        this._C3dViewer = C3dViewer;
        // console.log('C3dViewer',this._C3dViewer)
    }

    get C3dViewer() {
        return this._C3dViewer;
    } 
    /**
     * 设置参数
     * @param param 参数 string
     * @param value 值
     */
    set(param: string, value: any) {
        console.log('set',param,value)
        this[param] = value
    }
    /**
     * 获取参数
     * @param param 参数 string
     * @returns 
     */
    get(param: string) : any {
        console.log('get', param, this[param])
        return this[param];
    }

    /**
     * 地图初始化完成回调
     */
    initCallback(callback: Function){
        // let callback = ()=> {
        //     console.log("地图初始化完成");
        // }
        console.log('地图初始化完成回调')
        this._C3dViewer.setinitcallback(callback);
    }

    /**
     * home
     */
    flyhome(){
        console.log('执行flyhome')
        this._C3dViewer.flyhome();
    }

    /**
     * 复位
     */
    reset(){
        console.log('执行复位')
        this._C3dViewer.reset();
    }
    /**
     * 切换2D3D
     * @param type 3d 2d设置
     */
    switch2D3D(type?: string){
        let _type = type || this._switch2D3DStatus;
        console.log(_type)
        if(_type == '3d'){
            this._C3dViewer.set2D3D("2d");
            this._switch2D3DStatus = '2d';
        }else if(_type == '2d'){
            this._C3dViewer.set2D3D("3d");
            this._switch2D3DStatus = '3d';
        }
        
    }
    /**
     * 漫游
     * @param x 
     * @param y 
     * @param z 
     */
    flyto(x?: number, y?: number, z?: number){
        this._C3dViewer.manyou(x, y, z);
    }
    
    /**
     * 场景切换
     * @param type 
     * custom   自定义地图(默认)
     * image    卫星地图
     */
    switchScene(type: string){
        this._C3dViewer.setBackgroundType(type);
    }
    /**
     * 本地环境和水科院环境区分
     * @param blocal 
     * true 本地环境
     * false 水科院环境
     * 
     */

    setdataServer(blocal: boolean){
        console.log('本地环境和水科院环境区分',blocal)
        this._C3dViewer.setdataServer(blocal);
    }
    /**
     * 58环境切换
     * @param is58 
     * true 58环境
     * false 非58环境
     * 
     */

    setServer58(is58: boolean){
        console.log('58环境切换',is58)
        this._C3dViewer.setServer58(is58);
    }
    /**
     * 视角切换到58
     * 
     */

    flyhome58(){
        console.log('视角切换到58')
        this._C3dViewer.flyhome58();
    }
    /**
     * 测距
     * @param visible 显示隐藏
     */
    measureDistance(visible: boolean){
        if(visible){
            this._C3dViewer.ceju();
        }else{
            this._C3dViewer.unceju();
        }
    }

    /**
     * 测面
     * @param visible 显示隐藏
     */
    measureArea(visible: boolean){
        if(visible){
            this._C3dViewer.cemianji();
        }else{
            this._C3dViewer.uncemianji();
        }
    }

    /**
     * 更新slider回调函数
     * @param callback 
     */
    updateSliderCallback(callback: Function){
    //     let callback=(data)=>{
    //         console.log("updateslider:" + JSON.stringify(data));
    //    }
        this._C3dViewer.setUpdateslidecallback(callback);
    }

    /**
     * 专题制图
     * @param type  为getUrl时是获取图片地址，其他是设置下载图片的名字
     */
    getMapImgInfo(type: string){
        if(type == 'getUrl'){
            return this._C3dViewer.onExportImghref();
        }else{
            this._C3dViewer.saveToImage(type);
        }
    }

    /**
     * 
     * 设置经纬网
     * @param visible
     * 
     */
    setGridVisible(visible: boolean){
        this._C3dViewer.jingweiwang(visible);
    }
    /**
     * 设置播放播放图层透明度
     * @param type jyfb,jssd,dblc,psgw
     * @param value 0-100
     */
    setLayerAlpha(type: string, value: number){
        console.log('设置播放播放图层透明度',type, value)
        this._C3dViewer.setlayerAlpha(type, value);
    }
    /**
     * 设置倾斜摄影图层透明度
     * @param value 0-100
     */
    setQxsyLayerAlpha(value: number){
        console.log('设置倾斜摄影图层透明度', value)
        this._C3dViewer.setqxsyalpha( value);
    }
    /**
     * 设置播放位置
     * @param deepPosition 
     */
    onSetCurPosall(deepPosition: number|string){
        console.log('设置当前播放位置',deepPosition)
        this._C3dViewer.onSetCurPosall(deepPosition);
    }

    /**
     * 数字预案图层操作
     * @param ntype 方案id
     * @param type 操作类型
     * @param visible 图层显隐
     */
    onSetNumPlanLayerHandle(ntype: number, type: string, visible: boolean){
        console.log('数字预案图层操作',ntype, type, visible);
        if(type == 'ya_fxzh'){
            this._C3dViewer.ya_fxzh(ntype, visible);
        }else if(type == 'ya_bzcs'){
            this._C3dViewer.ya_bzcs(ntype, visible);
        }else if(type == 'ya_ydyc'){
            this._C3dViewer.ya_ydyc(ntype, visible);
        }else if(type == 'ya_ryjy'){
            this._C3dViewer.ya_ryjy(ntype, visible);
        }else if(type == 'ya_jtgk'){
            this._C3dViewer.ya_jtgk(ntype, visible);
        }else if(type == 'ya_zdcs'){
            this._C3dViewer.ya_zdcs(ntype, visible);
        }
    }
    // 积水时长可见性
    setJSSCvisible(bol: Boolean) {
        console.log('积水时长可见性', bol)
        this._C3dViewer.setJSSCvisible(bol);
    }
    // 管段切换调用方法
    updatePipeline(type: any) {
        console.log('管段切换调用方法', type)
        this._C3dViewer.updatePipeline(type);
    }

    /**
     * 播放deep水深图层
     * @param data 
     */
    StartDeep(data?: any){
        this._C3dViewer.StartDeep(data || this._playId);
    }
    /**
     * 暂停deep水深图层
     */
    StopDeep(){
        this._C3dViewer.StopDeep();
    }
    
    /**
     * 设置deep水深图层可见性
     * @param deepVisible 
     */
    setDeepVisible(deepVisible: boolean){
        this._C3dViewer.onsetDeepVisible(deepVisible);
    }

    /**
     * 播放deep流速图层
     * @param data 
     */
    StartSpeed(data?: any){
        this._C3dViewer.StartSpeed(data || this._playId);
    }

    /**
     * 停止deep流速图层
     */
    StopSpeed(){
        this._C3dViewer.StopSpeed();
    }
    /**
     * 设置当前deep流速播放位置
     * @param speedPosition 
     */
    setSpeedPosition(speedPosition: number|string){
        this._C3dViewer.onsetCurPosSpeed(speedPosition);
    }
    /**
     * 设置deep流速图层可见性
     * @param speedVisible 
     */
    setSpeedVisible(speedVisible: boolean){
        this._C3dViewer.onsetSpeedVisible(speedVisible);
    }

    /**
     * 设置降雨图层可见性
     * @param rainVisible 
     */
    setRainVisible(rainVisible: boolean){
        this._C3dViewer.onsetRainVisible(rainVisible);
    }


    /**
     * 设置管线的可见性
     * @param lineVisible 
     */
    setLineVisible(lineVisible: boolean){
        this._C3dViewer.setPipelineVisible(lineVisible);
    }
    // 设置溢流效果可见性
    set_gdyl_visible(bol: boolean){
        this._C3dViewer.set_gdyl_visible(bol);
    }
    
    /**
     * 设置管线是否可以点击
     * @param lineClickable 
     */
    setLineClickable(lineClickable: boolean){
        this._C3dViewer.setPipelineClickable(lineClickable);
    }
    /**
     * 开始管线播放
     * @param data 
     */
    Startpipe(data?: any){
        this._C3dViewer.Startpipe(data || this._playId);
    }
    /**
     * 停止管线播放
     */
    Stoppipe(){
        this._C3dViewer.Stoppipe();
    }

    /**
     * 播放全部
     * @param faid: 1, 方案ID
     * @param type 页面分类
     * @param pipetype 管段分类： 1/充满度，2/满管时长，3/排水能力
     *  
     */
    onStartAll(faid: number, type: number = 1, pipetype = 1){
        let data = {
            faid: faid,
            type: type,
            pipetype: pipetype
        }
        console.log('onStartAll开始播放',data);
        this._C3dViewer.onStartall(data);
    }

    /**
     * 停止全部
     */
    onStopAll(){
        console.log('onStopAll暂停全部');
        this._C3dViewer.onStopall();
    }
    /**
     * 暂停全部
     */
    onPauseAll(){
        console.log('onStopAll全部暂停');
        this._C3dViewer.onPauseall();
    }

    /**
     * 获取报警POI信息
     */
    getAlarmPoiInfo(id?: number, sceneType?:any){
        console.log('获取报警POI信息', id, sceneType)
        this._C3dViewer.getwarning(id, sceneType);
    }
    /**
     * 获取报警POI信息
     */
    getZXYBAlarmPoiInfo(id?: number){
        console.log('获取在线预报报警POI信息')
        this._C3dViewer.get_ZXYBWarnInfo(id);
    }

    /**
     * 关闭所有图层
     */
    closeAllLayers(){
        this._C3dViewer.CloseAlllayer();
    }
    /**
     * 打开所有图层
     */
    openAllLayers(){
        this._C3dViewer.OpenAlllayer();
    }
    /**
     * 设置图层显示隐藏
     * @param layername 图层名称
     * @param visible 可见状态
     *  river 水系
     *  liuyu 流域
     *  dtx 地铁线
     *  whitemodel 白膜
     *  ditiezhan 地铁站
     *  daolu 道路
     *  psfq 排水分区
     *  ylz_layer 雨量站
     *  zz_layer 闸站
     *  jsd_layer 积水点
     *  psk_layer 排水口
     *  txc_layer 调蓄池
     *  bz_layer 泵站
     *  psk_layer 排水口
     *  qxsy 倾斜摄影
     *  jrbx_layer 金融设施
     *  kjwh_layer 科教文化
     *  ylws_layer 医疗卫生
     *  zfjg_layer 政府机关
     */
    setLayervisible(layername: string, visible: boolean){
        console.log('设置图层显示隐藏',layername, visible)
        this._C3dViewer.setLayervisible(layername, visible);
    }

    /**
     * 获取 金融设施、科教文化、医疗卫生、政府机关等图层信息
     */
    getSiteInfoAttribute(){
        console.log('获取金融设施、科教文化、医疗卫生、政府机关等图层信息')
        this._C3dViewer.getsiteInfoAttribute();
    }

    /**
     * 设置单点查询的可用性
     * @param enabled 
     */
    setSinglePointQueryEnabled(enabled: boolean){
        console.log('设置单点查询的可用性', enabled)
        this._C3dViewer.enableddcx(enabled);
    }

    /**
     * 添加单点查询回调函数
     * @param callback 
     */
    addQueryCallback(callback: Function){
        // let callback = (data)=>{
        // //获取单点查询返回结果
        //     console.log("单点查询结果:"+ JSON.stringify(data));
        // }
        this._C3dViewer.onsetddcxcallback(callback);
    }

    /**
     * 设置图标点击回调
     * @param callback 
     */
    setIconClickCallback(callback: Function){
        // let callback = (data)=>{
        // //获取单点查询返回结果
        //     console.log("图标点击回调结果:"+ JSON.stringify(data));
        // }
        this._C3dViewer.onsetpoiclkcallback(callback);
    }

    /**
     * 设置数字预案图标点击回调
     * @param callback 
     */
    setSzyaIconClickCallback(callback: Function){
        // let callback = (data)=>{
        // //获取单点查询返回结果
        //     console.log("数字预案图标点击回调结果:"+ JSON.stringify(data));
        // }
        this._C3dViewer.setYjya_clkcallback(callback);
    }
    
    /**
     * 管线点击回调
     * @param callback 
     */
    setPipelineClickCallback(callback: Function){
        // let callback = (data)=>{
        // //获取单点查询返回结果
        //     console.log("管线点击回调结果:"+ JSON.stringify(data));
        // }
        this._C3dViewer.onsetpipelineclkcallback(callback);
    }

    /**
     * 设置管线是否可以点击
     */
    setPipelineClickable(clickable: boolean){
        this._C3dViewer.enablePipeClick(clickable);
    }


    /**
     * 切换到unity
     */
    switchToUnity(toUnitCallback){
        // let toUnitCallback = ()=>{
        // //获取单点查询返回结果
        //     console.log("切换到unit:");
        // }
        this._C3dViewer.setToUnitCallback(toUnitCallback);
    }

    /**
     * 设置响应行政区划
     */
    setXzqhVisible(xzjb_Callback){
        //设置响应行政区划显隐的回调函数
        // let xzjb_Callback =(data)=>{
        //     console.log("行政区划显隐:"+ JSON.stringify(data));
             
        // }
        this._C3dViewer.setxzjbCallback(xzjb_Callback);
    }

    /**
     * 重置播放图层
     */
    resetPlayLayer(){
        console.log('重置播放图层')
        this._C3dViewer.reset4layers();
    }

    /**
     * 跳转到指定位置
     */
    flyToPosition(x: number, y: number,){
        console.log('跳转到指定位置',x, y)
        this._C3dViewer.flyToXY(x, y);
    }
    


}


export default C3dViewerHandler;
